// Step 1: Switch to the database
use OrdersDatabase;

// Step 2: Add the "Age" field to all documents in the orderinfo collection
db.orderinfo.updateMany(
  {},  // Updates all documents
  { $set: { Age: null } }  // Initially setting Age to null
);

// Step 3: If you want to update the Age field for specific customers
db.orderinfo.updateOne({ cust_id: 123 }, { $set: { Age: 30 } });
db.orderinfo.updateOne({ cust_id: 124 }, { $set: { Age: 25 } });
db.orderinfo.updateOne({ cust_id: 125 }, { $set: { Age: 35 } });

// Step 4: Create a complex index (on cust_name, status, and price fields)
db.orderinfo.createIndex({ cust_name: 1, status: 1, price: -1 });

// Step 5: Remove duplicates (if any exist)
db.orderinfo.aggregate([
    { $group: { _id: { cust_name: "$cust_name", status: "$status", price: "$price" }, uniqueIds: { $addToSet: "$_id" }, count: { $sum: 1 } } },
    { $match: { count: { $gt: 1 } } },  // Find duplicates
    { $project: { _id: 0, uniqueIds: { $slice: ["$uniqueIds", 1, { $subtract: [{ $size: "$uniqueIds" }, 1] }] } } }
]).forEach(function(doc) {
    db.orderinfo.remove({ _id: { $in: doc.uniqueIds } });
});

// Step 6: Display the average price for each customer group by status
db.orderinfo.aggregate([
    { $group: { _id: "$status", avgPrice: { $avg: "$price" } } }
]);

// Step 7: Change the customer’s name whose status is “B”
db.orderinfo.updateMany(
  { status: "B" },
  { $set: { cust_name: "Updated Customer" } }
);

// Step 8: Verify the update
db.orderinfo.find({ status: "B" }).pretty();
